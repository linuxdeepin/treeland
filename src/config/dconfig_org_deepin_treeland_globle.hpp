/**
 * This file is generated by dconfig2cpp.
 * Command line arguments: /usr/libexec/dtk5/DCore/bin/dconfig2cpp ./misc/dconfig/org.deepin.treeland.globle.json
 * Generation time: 2025-02-27T15:58:40
 * JSON file version: 1.0
 *
 * WARNING: DO NOT MODIFY THIS FILE MANUALLY.
 * If you need to change the content, please modify the dconfig2cpp tool.
 */

#ifndef DCONFIG_ORG_DEEPIN_TREELAND_GLOBLE_H
#define DCONFIG_ORG_DEEPIN_TREELAND_GLOBLE_H

#include <QThread>
#include <QVariant>
#include <QDebug>
#include <QAtomicPointer>
#include <QAtomicInteger>
#include <DConfig>

class dconfig_org_deepin_treeland_globle : public QObject {
    Q_OBJECT

    Q_PROPERTY(QString defaultBackground READ defaultBackground WRITE setDefaultBackground NOTIFY defaultBackgroundChanged RESET resetDefaultBackground)
    Q_PROPERTY(bool forceSoftwareCursor READ forceSoftwareCursor WRITE setForceSoftwareCursor NOTIFY forceSoftwareCursorChanged RESET resetForceSoftwareCursor)
    Q_CLASSINFO("DConfigKeyList", "defaultBackground;forceSoftwareCursor")
    Q_CLASSINFO("DConfigFileName", "org.deepin.treeland.globle")
    Q_CLASSINFO("DConfigFileVersion", "1.0")

public:
    explicit dconfig_org_deepin_treeland_globle(QThread *thread, DTK_CORE_NAMESPACE::DConfigBackend *backend, const QString &name, const QString &appId, const QString &subpath, QObject *parent)
                : QObject(parent) {
        if (!thread->isRunning()) {
            qWarning() << QLatin1String("Warning: The provided thread is not running.");
        }
        Q_ASSERT(QThread::currentThread() != thread);
        auto worker = new QObject();
        worker->moveToThread(thread);
        QMetaObject::invokeMethod(worker, [=, this]() {
            DTK_CORE_NAMESPACE::DConfig *config = nullptr;
            if (backend) {
                if (appId.isNull()) {
                    config = DTK_CORE_NAMESPACE::DConfig::create(backend, name, subpath, nullptr);
                } else {
                    config = DTK_CORE_NAMESPACE::DConfig::create(backend, appId, name, subpath, nullptr);
                }
            } else {
                if (appId.isNull()) {
                    config = DTK_CORE_NAMESPACE::DConfig::create(name, subpath, nullptr);
                } else {
                    config = DTK_CORE_NAMESPACE::DConfig::create(appId, name, subpath, nullptr);
                }
            }
            if (!config) {
                qWarning() << QLatin1String("Failed to create DConfig instance.");
                worker->deleteLater();
                return;
            }
            config->moveToThread(QThread::currentThread());
            initializeInConfigThread(config);
            worker->deleteLater();
        });
    }
    static dconfig_org_deepin_treeland_globle* create(const QString &appId = {}, const QString &subpath = {}, QObject *parent = nullptr, QThread *thread = DTK_CORE_NAMESPACE::DConfig::globalThread())
    { return new dconfig_org_deepin_treeland_globle(thread, nullptr, QStringLiteral(u"\u006f\u0072\u0067\u002e\u0064\u0065\u0065\u0070\u0069\u006e\u002e\u0074\u0072\u0065\u0065\u006c\u0061\u006e\u0064\u002e\u0067\u006c\u006f\u0062\u006c\u0065"), appId, subpath, parent); }
    static dconfig_org_deepin_treeland_globle* create(DTK_CORE_NAMESPACE::DConfigBackend *backend, const QString &appId = {}, const QString &subpath = {}, QObject *parent = nullptr, QThread *thread = DTK_CORE_NAMESPACE::DConfig::globalThread())
    { return new dconfig_org_deepin_treeland_globle(thread, backend, QStringLiteral(u"\u006f\u0072\u0067\u002e\u0064\u0065\u0065\u0070\u0069\u006e\u002e\u0074\u0072\u0065\u0065\u006c\u0061\u006e\u0064\u002e\u0067\u006c\u006f\u0062\u006c\u0065"), appId, subpath, parent); }
    static dconfig_org_deepin_treeland_globle* createByName(const QString &name, const QString &appId = {}, const QString &subpath = {}, QObject *parent = nullptr, QThread *thread = DTK_CORE_NAMESPACE::DConfig::globalThread())
    { return new dconfig_org_deepin_treeland_globle(thread, nullptr, name, appId, subpath, parent); }
    static dconfig_org_deepin_treeland_globle* createByName(DTK_CORE_NAMESPACE::DConfigBackend *backend, const QString &name, const QString &appId = {}, const QString &subpath = {}, QObject *parent = nullptr, QThread *thread = DTK_CORE_NAMESPACE::DConfig::globalThread())
    { return new dconfig_org_deepin_treeland_globle(thread, backend, name, appId, subpath, parent); }
    ~dconfig_org_deepin_treeland_globle() {
        if (m_config.loadRelaxed()) {
            m_config.loadRelaxed()->deleteLater();
        }
    }

    Q_INVOKABLE DTK_CORE_NAMESPACE::DConfig *config() const {
        return m_config.loadRelaxed();
    }

    Q_INVOKABLE bool isInitializeSucceed() const {
        return m_status.loadRelaxed() == static_cast<int>(Status::Succeed);
    }

    Q_INVOKABLE bool isInitializeFailed() const {
        return m_status.loadRelaxed() == static_cast<int>(Status::Failed);
    }

    Q_INVOKABLE bool isInitializing() const {
        return m_status.loadRelaxed() == static_cast<int>(Status::Invalid);
    }

    Q_INVOKABLE QStringList keyList() const {
        return { QStringLiteral(u"\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0042\u0061\u0063\u006b\u0067\u0072\u006f\u0075\u006e\u0064"),
                 QStringLiteral(u"\u0066\u006f\u0072\u0063\u0065\u0053\u006f\u0066\u0074\u0077\u0061\u0072\u0065\u0043\u0075\u0072\u0073\u006f\u0072")};
    }

    Q_INVOKABLE bool isDefaultValue(const QString &key) const {
        if (key == QStringLiteral(u"\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0042\u0061\u0063\u006b\u0067\u0072\u006f\u0075\u006e\u0064"))
            return defaultBackgroundIsDefaultValue();
        if (key == QStringLiteral(u"\u0066\u006f\u0072\u0063\u0065\u0053\u006f\u0066\u0074\u0077\u0061\u0072\u0065\u0043\u0075\u0072\u0073\u006f\u0072"))
            return forceSoftwareCursorIsDefaultValue();
        return false;
    }

    QString defaultBackground() const {
        return p_defaultBackground;
    }
    void setDefaultBackground(const QString &value) {
        auto oldValue = p_defaultBackground;
        p_defaultBackground = value;
        markPropertySet(0);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0042\u0061\u0063\u006b\u0067\u0072\u006f\u0075\u006e\u0064"), value);
            });
        }
        if (p_defaultBackground != oldValue) {
            Q_EMIT defaultBackgroundChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0042\u0061\u0063\u006b\u0067\u0072\u006f\u0075\u006e\u0064"), value);
        }
    }
    void resetDefaultBackground() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0042\u0061\u0063\u006b\u0067\u0072\u006f\u0075\u006e\u0064"));
            });
        }
    }
    Q_INVOKABLE bool defaultBackgroundIsDefaultValue() const {
        return !testPropertySet(0);
    }
    bool forceSoftwareCursor() const {
        return p_forceSoftwareCursor;
    }
    void setForceSoftwareCursor(const bool &value) {
        auto oldValue = p_forceSoftwareCursor;
        p_forceSoftwareCursor = value;
        markPropertySet(1);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u0066\u006f\u0072\u0063\u0065\u0053\u006f\u0066\u0074\u0077\u0061\u0072\u0065\u0043\u0075\u0072\u0073\u006f\u0072"), value);
            });
        }
        if (p_forceSoftwareCursor != oldValue) {
            Q_EMIT forceSoftwareCursorChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u0066\u006f\u0072\u0063\u0065\u0053\u006f\u0066\u0074\u0077\u0061\u0072\u0065\u0043\u0075\u0072\u0073\u006f\u0072"), value);
        }
    }
    void resetForceSoftwareCursor() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u0066\u006f\u0072\u0063\u0065\u0053\u006f\u0066\u0074\u0077\u0061\u0072\u0065\u0043\u0075\u0072\u0073\u006f\u0072"));
            });
        }
    }
    Q_INVOKABLE bool forceSoftwareCursorIsDefaultValue() const {
        return !testPropertySet(1);
    }
Q_SIGNALS:
    void configInitializeFailed(DTK_CORE_NAMESPACE::DConfig *config);
    void configInitializeSucceed(DTK_CORE_NAMESPACE::DConfig *config);
    void valueChanged(const QString &key, const QVariant &value);

    void defaultBackgroundChanged();
    void forceSoftwareCursorChanged();
private:
    void initializeInConfigThread(DTK_CORE_NAMESPACE::DConfig *config) {
        Q_ASSERT(!m_config.loadRelaxed());
        m_config.storeRelaxed(config);
        if (!config->isValid()) {
           m_status.storeRelaxed(static_cast<int>(Status::Failed));
           Q_EMIT configInitializeFailed(config);
           return;
        }

        if (testPropertySet(0)) {
            config->setValue(QStringLiteral(u"\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0042\u0061\u0063\u006b\u0067\u0072\u006f\u0075\u006e\u0064"), QVariant::fromValue(p_defaultBackground));
        } else {
            updateValue(QStringLiteral(u"\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0042\u0061\u0063\u006b\u0067\u0072\u006f\u0075\u006e\u0064"), QVariant::fromValue(p_defaultBackground));
        }
        if (testPropertySet(1)) {
            config->setValue(QStringLiteral(u"\u0066\u006f\u0072\u0063\u0065\u0053\u006f\u0066\u0074\u0077\u0061\u0072\u0065\u0043\u0075\u0072\u0073\u006f\u0072"), QVariant::fromValue(p_forceSoftwareCursor));
        } else {
            updateValue(QStringLiteral(u"\u0066\u006f\u0072\u0063\u0065\u0053\u006f\u0066\u0074\u0077\u0061\u0072\u0065\u0043\u0075\u0072\u0073\u006f\u0072"), QVariant::fromValue(p_forceSoftwareCursor));
        }

        connect(config, &DTK_CORE_NAMESPACE::DConfig::valueChanged, this, [this](const QString &key) {
            updateValue(key);
        }, Qt::DirectConnection);

        m_status.storeRelaxed(static_cast<int>(Status::Succeed));
        Q_EMIT configInitializeSucceed(config);
    }
    void updateValue(const QString &key, const QVariant &fallback = QVariant()) {
        Q_ASSERT(QThread::currentThread() == m_config.loadRelaxed()->thread());
        const QVariant &value = m_config.loadRelaxed()->value(key, fallback);
        if (key == QStringLiteral(u"\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0042\u0061\u0063\u006b\u0067\u0072\u006f\u0075\u006e\u0064")) {
            markPropertySet(0, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<QString>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_defaultBackground != newValue) {
                    p_defaultBackground = newValue;
                    Q_EMIT defaultBackgroundChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u0066\u006f\u0072\u0063\u0065\u0053\u006f\u0066\u0074\u0077\u0061\u0072\u0065\u0043\u0075\u0072\u0073\u006f\u0072")) {
            markPropertySet(1, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<bool>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_forceSoftwareCursor != newValue) {
                    p_forceSoftwareCursor = newValue;
                    Q_EMIT forceSoftwareCursorChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
    }
    inline void markPropertySet(const int index, bool on = true) {
        if (index < 32) {
            if (on)
                m_propertySetStatus0.fetchAndOrOrdered(1 << (index - 0));
            else
                m_propertySetStatus0.fetchAndAndOrdered(1 << (index - 0));
            return;
        }
        Q_UNREACHABLE();
    }
    inline bool testPropertySet(const int index) const {
        if (index < 32) {
            return (m_propertySetStatus0.loadRelaxed() & (1 << (index - 0)));
        }
        Q_UNREACHABLE();
    }

    QAtomicPointer<DTK_CORE_NAMESPACE::DConfig> m_config = nullptr;

public:
    enum class Status {
        Invalid = 0,
        Succeed = 1,
        Failed = 2
    };
private:
    QAtomicInteger<int> m_status = static_cast<int>(Status::Invalid);

    // Default value: "/usr/share/backgrounds/default_background.jpg"
    QString p_defaultBackground { QStringLiteral(u"\u002f\u0075\u0073\u0072\u002f\u0073\u0068\u0061\u0072\u0065\u002f\u0062\u0061\u0063\u006b\u0067\u0072\u006f\u0075\u006e\u0064\u0073\u002f\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u005f\u0062\u0061\u0063\u006b\u0067\u0072\u006f\u0075\u006e\u0064\u002e\u006a\u0070\u0067") };
    bool p_forceSoftwareCursor { false };
    QAtomicInteger<quint32> m_propertySetStatus0 = 0;
};

#endif // DCONFIG_ORG_DEEPIN_TREELAND_GLOBLE_H
