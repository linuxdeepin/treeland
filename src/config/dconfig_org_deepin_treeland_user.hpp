/**
 * This file is generated by dconfig2cpp.
 * Command line arguments: /usr/libexec/dtk5/DCore/bin/dconfig2cpp ./misc/dconfig/org.deepin.treeland.user.json
 * Generation time: 2025-02-28T15:15:03
 * JSON file version: 1.0
 *
 * WARNING: DO NOT MODIFY THIS FILE MANUALLY.
 * If you need to change the content, please modify the dconfig2cpp tool.
 */

#ifndef DCONFIG_ORG_DEEPIN_TREELAND_USER_H
#define DCONFIG_ORG_DEEPIN_TREELAND_USER_H

#include <QThread>
#include <QVariant>
#include <QDebug>
#include <QAtomicPointer>
#include <QAtomicInteger>
#include <DConfig>

class dconfig_org_deepin_treeland_user : public QObject {
    Q_OBJECT

    Q_PROPERTY(QString activeColor READ activeColor WRITE setActiveColor NOTIFY activeColorChanged RESET resetActiveColor)
    Q_PROPERTY(bool cursorBlink READ cursorBlink WRITE setCursorBlink NOTIFY cursorBlinkChanged RESET resetCursorBlink)
    Q_PROPERTY(qlonglong cursorBlinkTime READ cursorBlinkTime WRITE setCursorBlinkTime NOTIFY cursorBlinkTimeChanged RESET resetCursorBlinkTime)
    Q_PROPERTY(qlonglong cursorSize READ cursorSize WRITE setCursorSize NOTIFY cursorSizeChanged RESET resetCursorSize)
    Q_PROPERTY(QString cursorThemeName READ cursorThemeName WRITE setCursorThemeName NOTIFY cursorThemeNameChanged RESET resetCursorThemeName)
    Q_PROPERTY(qlonglong dndDragThreshold READ dndDragThreshold WRITE setDndDragThreshold NOTIFY dndDragThresholdChanged RESET resetDndDragThreshold)
    Q_PROPERTY(qlonglong doubleClickDistance READ doubleClickDistance WRITE setDoubleClickDistance NOTIFY doubleClickDistanceChanged RESET resetDoubleClickDistance)
    Q_PROPERTY(qlonglong doubleClickTime READ doubleClickTime WRITE setDoubleClickTime NOTIFY doubleClickTimeChanged RESET resetDoubleClickTime)
    Q_PROPERTY(QString font READ font WRITE setFont NOTIFY fontChanged RESET resetFont)
    Q_PROPERTY(qlonglong fontSize READ fontSize WRITE setFontSize NOTIFY fontSizeChanged RESET resetFontSize)
    Q_PROPERTY(QString iconThemeName READ iconThemeName WRITE setIconThemeName NOTIFY iconThemeNameChanged RESET resetIconThemeName)
    Q_PROPERTY(QString lostScreen READ lostScreen WRITE setLostScreen NOTIFY lostScreenChanged RESET resetLostScreen)
    Q_PROPERTY(qlonglong maxWorkspace READ maxWorkspace WRITE setMaxWorkspace NOTIFY maxWorkspaceChanged RESET resetMaxWorkspace)
    Q_PROPERTY(QString monoFont READ monoFont WRITE setMonoFont NOTIFY monoFontChanged RESET resetMonoFont)
    Q_PROPERTY(qlonglong numWorkspace READ numWorkspace WRITE setNumWorkspace NOTIFY numWorkspaceChanged RESET resetNumWorkspace)
    Q_PROPERTY(bool preferDark READ preferDark WRITE setPreferDark NOTIFY preferDarkChanged RESET resetPreferDark)
    Q_PROPERTY(bool showOnLock READ showOnLock WRITE setShowOnLock NOTIFY showOnLockChanged RESET resetShowOnLock)
    Q_PROPERTY(QString themeName READ themeName WRITE setThemeName NOTIFY themeNameChanged RESET resetThemeName)
    Q_PROPERTY(qlonglong windowOpacity READ windowOpacity WRITE setWindowOpacity NOTIFY windowOpacityChanged RESET resetWindowOpacity)
    Q_PROPERTY(qlonglong windowRadius READ windowRadius WRITE setWindowRadius NOTIFY windowRadiusChanged RESET resetWindowRadius)
    Q_PROPERTY(qlonglong windowThemeType READ windowThemeType WRITE setWindowThemeType NOTIFY windowThemeTypeChanged RESET resetWindowThemeType)
    Q_PROPERTY(qlonglong windowTitlebarHeight READ windowTitlebarHeight WRITE setWindowTitlebarHeight NOTIFY windowTitlebarHeightChanged RESET resetWindowTitlebarHeight)
    Q_CLASSINFO("DConfigKeyList", "activeColor;cursorBlink;cursorBlinkTime;cursorSize;cursorThemeName;dndDragThreshold;doubleClickDistance;doubleClickTime;font;fontSize;iconThemeName;lostScreen;maxWorkspace;monoFont;numWorkspace;preferDark;showOnLock;themeName;windowOpacity;windowRadius;windowThemeType;windowTitlebarHeight")
    Q_CLASSINFO("DConfigFileName", "org.deepin.treeland.user")
    Q_CLASSINFO("DConfigFileVersion", "1.0")

public:
    explicit dconfig_org_deepin_treeland_user(QThread *thread, DTK_CORE_NAMESPACE::DConfigBackend *backend, const QString &name, const QString &appId, const QString &subpath, QObject *parent)
                : QObject(parent) {
        if (!thread->isRunning()) {
            qWarning() << QLatin1String("Warning: The provided thread is not running.");
        }
        Q_ASSERT(QThread::currentThread() != thread);
        auto worker = new QObject();
        worker->moveToThread(thread);
        QMetaObject::invokeMethod(worker, [=, this]() {
            DTK_CORE_NAMESPACE::DConfig *config = nullptr;
            if (backend) {
                if (appId.isNull()) {
                    config = DTK_CORE_NAMESPACE::DConfig::create(backend, name, subpath, nullptr);
                } else {
                    config = DTK_CORE_NAMESPACE::DConfig::create(backend, appId, name, subpath, nullptr);
                }
            } else {
                if (appId.isNull()) {
                    config = DTK_CORE_NAMESPACE::DConfig::create(name, subpath, nullptr);
                } else {
                    config = DTK_CORE_NAMESPACE::DConfig::create(appId, name, subpath, nullptr);
                }
            }
            if (!config) {
                qWarning() << QLatin1String("Failed to create DConfig instance.");
                worker->deleteLater();
                return;
            }
            config->moveToThread(QThread::currentThread());
            initializeInConfigThread(config);
            worker->deleteLater();
        });
    }
    static dconfig_org_deepin_treeland_user* create(const QString &appId = {}, const QString &subpath = {}, QObject *parent = nullptr, QThread *thread = DTK_CORE_NAMESPACE::DConfig::globalThread())
    { return new dconfig_org_deepin_treeland_user(thread, nullptr, QStringLiteral(u"\u006f\u0072\u0067\u002e\u0064\u0065\u0065\u0070\u0069\u006e\u002e\u0074\u0072\u0065\u0065\u006c\u0061\u006e\u0064\u002e\u0075\u0073\u0065\u0072"), appId, subpath, parent); }
    static dconfig_org_deepin_treeland_user* create(DTK_CORE_NAMESPACE::DConfigBackend *backend, const QString &appId = {}, const QString &subpath = {}, QObject *parent = nullptr, QThread *thread = DTK_CORE_NAMESPACE::DConfig::globalThread())
    { return new dconfig_org_deepin_treeland_user(thread, backend, QStringLiteral(u"\u006f\u0072\u0067\u002e\u0064\u0065\u0065\u0070\u0069\u006e\u002e\u0074\u0072\u0065\u0065\u006c\u0061\u006e\u0064\u002e\u0075\u0073\u0065\u0072"), appId, subpath, parent); }
    static dconfig_org_deepin_treeland_user* createByName(const QString &name, const QString &appId = {}, const QString &subpath = {}, QObject *parent = nullptr, QThread *thread = DTK_CORE_NAMESPACE::DConfig::globalThread())
    { return new dconfig_org_deepin_treeland_user(thread, nullptr, name, appId, subpath, parent); }
    static dconfig_org_deepin_treeland_user* createByName(DTK_CORE_NAMESPACE::DConfigBackend *backend, const QString &name, const QString &appId = {}, const QString &subpath = {}, QObject *parent = nullptr, QThread *thread = DTK_CORE_NAMESPACE::DConfig::globalThread())
    { return new dconfig_org_deepin_treeland_user(thread, backend, name, appId, subpath, parent); }
    ~dconfig_org_deepin_treeland_user() {
        if (m_config.loadRelaxed()) {
            m_config.loadRelaxed()->deleteLater();
        }
    }

    Q_INVOKABLE DTK_CORE_NAMESPACE::DConfig *config() const {
        return m_config.loadRelaxed();
    }

    Q_INVOKABLE bool isInitializeSucceed() const {
        return m_status.loadRelaxed() == static_cast<int>(Status::Succeed);
    }

    Q_INVOKABLE bool isInitializeFailed() const {
        return m_status.loadRelaxed() == static_cast<int>(Status::Failed);
    }

    Q_INVOKABLE bool isInitializing() const {
        return m_status.loadRelaxed() == static_cast<int>(Status::Invalid);
    }

    Q_INVOKABLE QStringList keyList() const {
        return { QStringLiteral(u"\u0061\u0063\u0074\u0069\u0076\u0065\u0043\u006f\u006c\u006f\u0072"),
                 QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0042\u006c\u0069\u006e\u006b"),
                 QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0042\u006c\u0069\u006e\u006b\u0054\u0069\u006d\u0065"),
                 QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0053\u0069\u007a\u0065"),
                 QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0054\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"),
                 QStringLiteral(u"\u0064\u006e\u0064\u0044\u0072\u0061\u0067\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064"),
                 QStringLiteral(u"\u0064\u006f\u0075\u0062\u006c\u0065\u0043\u006c\u0069\u0063\u006b\u0044\u0069\u0073\u0074\u0061\u006e\u0063\u0065"),
                 QStringLiteral(u"\u0064\u006f\u0075\u0062\u006c\u0065\u0043\u006c\u0069\u0063\u006b\u0054\u0069\u006d\u0065"),
                 QStringLiteral(u"\u0066\u006f\u006e\u0074"),
                 QStringLiteral(u"\u0066\u006f\u006e\u0074\u0053\u0069\u007a\u0065"),
                 QStringLiteral(u"\u0069\u0063\u006f\u006e\u0054\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"),
                 QStringLiteral(u"\u006c\u006f\u0073\u0074\u0053\u0063\u0072\u0065\u0065\u006e"),
                 QStringLiteral(u"\u006d\u0061\u0078\u0057\u006f\u0072\u006b\u0073\u0070\u0061\u0063\u0065"),
                 QStringLiteral(u"\u006d\u006f\u006e\u006f\u0046\u006f\u006e\u0074"),
                 QStringLiteral(u"\u006e\u0075\u006d\u0057\u006f\u0072\u006b\u0073\u0070\u0061\u0063\u0065"),
                 QStringLiteral(u"\u0070\u0072\u0065\u0066\u0065\u0072\u0044\u0061\u0072\u006b"),
                 QStringLiteral(u"\u0073\u0068\u006f\u0077\u004f\u006e\u004c\u006f\u0063\u006b"),
                 QStringLiteral(u"\u0074\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"),
                 QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u004f\u0070\u0061\u0063\u0069\u0074\u0079"),
                 QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0052\u0061\u0064\u0069\u0075\u0073"),
                 QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0054\u0068\u0065\u006d\u0065\u0054\u0079\u0070\u0065"),
                 QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0054\u0069\u0074\u006c\u0065\u0062\u0061\u0072\u0048\u0065\u0069\u0067\u0068\u0074")};
    }

    Q_INVOKABLE bool isDefaultValue(const QString &key) const {
        if (key == QStringLiteral(u"\u0061\u0063\u0074\u0069\u0076\u0065\u0043\u006f\u006c\u006f\u0072"))
            return activeColorIsDefaultValue();
        if (key == QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0042\u006c\u0069\u006e\u006b"))
            return cursorBlinkIsDefaultValue();
        if (key == QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0042\u006c\u0069\u006e\u006b\u0054\u0069\u006d\u0065"))
            return cursorBlinkTimeIsDefaultValue();
        if (key == QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0053\u0069\u007a\u0065"))
            return cursorSizeIsDefaultValue();
        if (key == QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0054\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"))
            return cursorThemeNameIsDefaultValue();
        if (key == QStringLiteral(u"\u0064\u006e\u0064\u0044\u0072\u0061\u0067\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064"))
            return dndDragThresholdIsDefaultValue();
        if (key == QStringLiteral(u"\u0064\u006f\u0075\u0062\u006c\u0065\u0043\u006c\u0069\u0063\u006b\u0044\u0069\u0073\u0074\u0061\u006e\u0063\u0065"))
            return doubleClickDistanceIsDefaultValue();
        if (key == QStringLiteral(u"\u0064\u006f\u0075\u0062\u006c\u0065\u0043\u006c\u0069\u0063\u006b\u0054\u0069\u006d\u0065"))
            return doubleClickTimeIsDefaultValue();
        if (key == QStringLiteral(u"\u0066\u006f\u006e\u0074"))
            return fontIsDefaultValue();
        if (key == QStringLiteral(u"\u0066\u006f\u006e\u0074\u0053\u0069\u007a\u0065"))
            return fontSizeIsDefaultValue();
        if (key == QStringLiteral(u"\u0069\u0063\u006f\u006e\u0054\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"))
            return iconThemeNameIsDefaultValue();
        if (key == QStringLiteral(u"\u006c\u006f\u0073\u0074\u0053\u0063\u0072\u0065\u0065\u006e"))
            return lostScreenIsDefaultValue();
        if (key == QStringLiteral(u"\u006d\u0061\u0078\u0057\u006f\u0072\u006b\u0073\u0070\u0061\u0063\u0065"))
            return maxWorkspaceIsDefaultValue();
        if (key == QStringLiteral(u"\u006d\u006f\u006e\u006f\u0046\u006f\u006e\u0074"))
            return monoFontIsDefaultValue();
        if (key == QStringLiteral(u"\u006e\u0075\u006d\u0057\u006f\u0072\u006b\u0073\u0070\u0061\u0063\u0065"))
            return numWorkspaceIsDefaultValue();
        if (key == QStringLiteral(u"\u0070\u0072\u0065\u0066\u0065\u0072\u0044\u0061\u0072\u006b"))
            return preferDarkIsDefaultValue();
        if (key == QStringLiteral(u"\u0073\u0068\u006f\u0077\u004f\u006e\u004c\u006f\u0063\u006b"))
            return showOnLockIsDefaultValue();
        if (key == QStringLiteral(u"\u0074\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"))
            return themeNameIsDefaultValue();
        if (key == QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u004f\u0070\u0061\u0063\u0069\u0074\u0079"))
            return windowOpacityIsDefaultValue();
        if (key == QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0052\u0061\u0064\u0069\u0075\u0073"))
            return windowRadiusIsDefaultValue();
        if (key == QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0054\u0068\u0065\u006d\u0065\u0054\u0079\u0070\u0065"))
            return windowThemeTypeIsDefaultValue();
        if (key == QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0054\u0069\u0074\u006c\u0065\u0062\u0061\u0072\u0048\u0065\u0069\u0067\u0068\u0074"))
            return windowTitlebarHeightIsDefaultValue();
        return false;
    }

    QString activeColor() const {
        return p_activeColor;
    }
    void setActiveColor(const QString &value) {
        auto oldValue = p_activeColor;
        p_activeColor = value;
        markPropertySet(0);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u0061\u0063\u0074\u0069\u0076\u0065\u0043\u006f\u006c\u006f\u0072"), value);
            });
        }
        if (p_activeColor != oldValue) {
            Q_EMIT activeColorChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u0061\u0063\u0074\u0069\u0076\u0065\u0043\u006f\u006c\u006f\u0072"), value);
        }
    }
    void resetActiveColor() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u0061\u0063\u0074\u0069\u0076\u0065\u0043\u006f\u006c\u006f\u0072"));
            });
        }
    }
    Q_INVOKABLE bool activeColorIsDefaultValue() const {
        return !testPropertySet(0);
    }
    bool cursorBlink() const {
        return p_cursorBlink;
    }
    void setCursorBlink(const bool &value) {
        auto oldValue = p_cursorBlink;
        p_cursorBlink = value;
        markPropertySet(1);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0042\u006c\u0069\u006e\u006b"), value);
            });
        }
        if (p_cursorBlink != oldValue) {
            Q_EMIT cursorBlinkChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0042\u006c\u0069\u006e\u006b"), value);
        }
    }
    void resetCursorBlink() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0042\u006c\u0069\u006e\u006b"));
            });
        }
    }
    Q_INVOKABLE bool cursorBlinkIsDefaultValue() const {
        return !testPropertySet(1);
    }
    qlonglong cursorBlinkTime() const {
        return p_cursorBlinkTime;
    }
    void setCursorBlinkTime(const qlonglong &value) {
        auto oldValue = p_cursorBlinkTime;
        p_cursorBlinkTime = value;
        markPropertySet(2);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0042\u006c\u0069\u006e\u006b\u0054\u0069\u006d\u0065"), value);
            });
        }
        if (p_cursorBlinkTime != oldValue) {
            Q_EMIT cursorBlinkTimeChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0042\u006c\u0069\u006e\u006b\u0054\u0069\u006d\u0065"), value);
        }
    }
    void resetCursorBlinkTime() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0042\u006c\u0069\u006e\u006b\u0054\u0069\u006d\u0065"));
            });
        }
    }
    Q_INVOKABLE bool cursorBlinkTimeIsDefaultValue() const {
        return !testPropertySet(2);
    }
    qlonglong cursorSize() const {
        return p_cursorSize;
    }
    void setCursorSize(const qlonglong &value) {
        auto oldValue = p_cursorSize;
        p_cursorSize = value;
        markPropertySet(3);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0053\u0069\u007a\u0065"), value);
            });
        }
        if (p_cursorSize != oldValue) {
            Q_EMIT cursorSizeChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0053\u0069\u007a\u0065"), value);
        }
    }
    void resetCursorSize() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0053\u0069\u007a\u0065"));
            });
        }
    }
    Q_INVOKABLE bool cursorSizeIsDefaultValue() const {
        return !testPropertySet(3);
    }
    QString cursorThemeName() const {
        return p_cursorThemeName;
    }
    void setCursorThemeName(const QString &value) {
        auto oldValue = p_cursorThemeName;
        p_cursorThemeName = value;
        markPropertySet(4);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0054\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"), value);
            });
        }
        if (p_cursorThemeName != oldValue) {
            Q_EMIT cursorThemeNameChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0054\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"), value);
        }
    }
    void resetCursorThemeName() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0054\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"));
            });
        }
    }
    Q_INVOKABLE bool cursorThemeNameIsDefaultValue() const {
        return !testPropertySet(4);
    }
    qlonglong dndDragThreshold() const {
        return p_dndDragThreshold;
    }
    void setDndDragThreshold(const qlonglong &value) {
        auto oldValue = p_dndDragThreshold;
        p_dndDragThreshold = value;
        markPropertySet(5);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u0064\u006e\u0064\u0044\u0072\u0061\u0067\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064"), value);
            });
        }
        if (p_dndDragThreshold != oldValue) {
            Q_EMIT dndDragThresholdChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u0064\u006e\u0064\u0044\u0072\u0061\u0067\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064"), value);
        }
    }
    void resetDndDragThreshold() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u0064\u006e\u0064\u0044\u0072\u0061\u0067\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064"));
            });
        }
    }
    Q_INVOKABLE bool dndDragThresholdIsDefaultValue() const {
        return !testPropertySet(5);
    }
    qlonglong doubleClickDistance() const {
        return p_doubleClickDistance;
    }
    void setDoubleClickDistance(const qlonglong &value) {
        auto oldValue = p_doubleClickDistance;
        p_doubleClickDistance = value;
        markPropertySet(6);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u0064\u006f\u0075\u0062\u006c\u0065\u0043\u006c\u0069\u0063\u006b\u0044\u0069\u0073\u0074\u0061\u006e\u0063\u0065"), value);
            });
        }
        if (p_doubleClickDistance != oldValue) {
            Q_EMIT doubleClickDistanceChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u0064\u006f\u0075\u0062\u006c\u0065\u0043\u006c\u0069\u0063\u006b\u0044\u0069\u0073\u0074\u0061\u006e\u0063\u0065"), value);
        }
    }
    void resetDoubleClickDistance() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u0064\u006f\u0075\u0062\u006c\u0065\u0043\u006c\u0069\u0063\u006b\u0044\u0069\u0073\u0074\u0061\u006e\u0063\u0065"));
            });
        }
    }
    Q_INVOKABLE bool doubleClickDistanceIsDefaultValue() const {
        return !testPropertySet(6);
    }
    qlonglong doubleClickTime() const {
        return p_doubleClickTime;
    }
    void setDoubleClickTime(const qlonglong &value) {
        auto oldValue = p_doubleClickTime;
        p_doubleClickTime = value;
        markPropertySet(7);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u0064\u006f\u0075\u0062\u006c\u0065\u0043\u006c\u0069\u0063\u006b\u0054\u0069\u006d\u0065"), value);
            });
        }
        if (p_doubleClickTime != oldValue) {
            Q_EMIT doubleClickTimeChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u0064\u006f\u0075\u0062\u006c\u0065\u0043\u006c\u0069\u0063\u006b\u0054\u0069\u006d\u0065"), value);
        }
    }
    void resetDoubleClickTime() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u0064\u006f\u0075\u0062\u006c\u0065\u0043\u006c\u0069\u0063\u006b\u0054\u0069\u006d\u0065"));
            });
        }
    }
    Q_INVOKABLE bool doubleClickTimeIsDefaultValue() const {
        return !testPropertySet(7);
    }
    QString font() const {
        return p_font;
    }
    void setFont(const QString &value) {
        auto oldValue = p_font;
        p_font = value;
        markPropertySet(8);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u0066\u006f\u006e\u0074"), value);
            });
        }
        if (p_font != oldValue) {
            Q_EMIT fontChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u0066\u006f\u006e\u0074"), value);
        }
    }
    void resetFont() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u0066\u006f\u006e\u0074"));
            });
        }
    }
    Q_INVOKABLE bool fontIsDefaultValue() const {
        return !testPropertySet(8);
    }
    qlonglong fontSize() const {
        return p_fontSize;
    }
    void setFontSize(const qlonglong &value) {
        auto oldValue = p_fontSize;
        p_fontSize = value;
        markPropertySet(9);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u0066\u006f\u006e\u0074\u0053\u0069\u007a\u0065"), value);
            });
        }
        if (p_fontSize != oldValue) {
            Q_EMIT fontSizeChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u0066\u006f\u006e\u0074\u0053\u0069\u007a\u0065"), value);
        }
    }
    void resetFontSize() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u0066\u006f\u006e\u0074\u0053\u0069\u007a\u0065"));
            });
        }
    }
    Q_INVOKABLE bool fontSizeIsDefaultValue() const {
        return !testPropertySet(9);
    }
    QString iconThemeName() const {
        return p_iconThemeName;
    }
    void setIconThemeName(const QString &value) {
        auto oldValue = p_iconThemeName;
        p_iconThemeName = value;
        markPropertySet(10);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u0069\u0063\u006f\u006e\u0054\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"), value);
            });
        }
        if (p_iconThemeName != oldValue) {
            Q_EMIT iconThemeNameChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u0069\u0063\u006f\u006e\u0054\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"), value);
        }
    }
    void resetIconThemeName() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u0069\u0063\u006f\u006e\u0054\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"));
            });
        }
    }
    Q_INVOKABLE bool iconThemeNameIsDefaultValue() const {
        return !testPropertySet(10);
    }
    QString lostScreen() const {
        return p_lostScreen;
    }
    void setLostScreen(const QString &value) {
        auto oldValue = p_lostScreen;
        p_lostScreen = value;
        markPropertySet(11);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u006c\u006f\u0073\u0074\u0053\u0063\u0072\u0065\u0065\u006e"), value);
            });
        }
        if (p_lostScreen != oldValue) {
            Q_EMIT lostScreenChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u006c\u006f\u0073\u0074\u0053\u0063\u0072\u0065\u0065\u006e"), value);
        }
    }
    void resetLostScreen() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u006c\u006f\u0073\u0074\u0053\u0063\u0072\u0065\u0065\u006e"));
            });
        }
    }
    Q_INVOKABLE bool lostScreenIsDefaultValue() const {
        return !testPropertySet(11);
    }
    qlonglong maxWorkspace() const {
        return p_maxWorkspace;
    }
    void setMaxWorkspace(const qlonglong &value) {
        auto oldValue = p_maxWorkspace;
        p_maxWorkspace = value;
        markPropertySet(12);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u006d\u0061\u0078\u0057\u006f\u0072\u006b\u0073\u0070\u0061\u0063\u0065"), value);
            });
        }
        if (p_maxWorkspace != oldValue) {
            Q_EMIT maxWorkspaceChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u006d\u0061\u0078\u0057\u006f\u0072\u006b\u0073\u0070\u0061\u0063\u0065"), value);
        }
    }
    void resetMaxWorkspace() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u006d\u0061\u0078\u0057\u006f\u0072\u006b\u0073\u0070\u0061\u0063\u0065"));
            });
        }
    }
    Q_INVOKABLE bool maxWorkspaceIsDefaultValue() const {
        return !testPropertySet(12);
    }
    QString monoFont() const {
        return p_monoFont;
    }
    void setMonoFont(const QString &value) {
        auto oldValue = p_monoFont;
        p_monoFont = value;
        markPropertySet(13);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u006d\u006f\u006e\u006f\u0046\u006f\u006e\u0074"), value);
            });
        }
        if (p_monoFont != oldValue) {
            Q_EMIT monoFontChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u006d\u006f\u006e\u006f\u0046\u006f\u006e\u0074"), value);
        }
    }
    void resetMonoFont() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u006d\u006f\u006e\u006f\u0046\u006f\u006e\u0074"));
            });
        }
    }
    Q_INVOKABLE bool monoFontIsDefaultValue() const {
        return !testPropertySet(13);
    }
    qlonglong numWorkspace() const {
        return p_numWorkspace;
    }
    void setNumWorkspace(const qlonglong &value) {
        auto oldValue = p_numWorkspace;
        p_numWorkspace = value;
        markPropertySet(14);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u006e\u0075\u006d\u0057\u006f\u0072\u006b\u0073\u0070\u0061\u0063\u0065"), value);
            });
        }
        if (p_numWorkspace != oldValue) {
            Q_EMIT numWorkspaceChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u006e\u0075\u006d\u0057\u006f\u0072\u006b\u0073\u0070\u0061\u0063\u0065"), value);
        }
    }
    void resetNumWorkspace() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u006e\u0075\u006d\u0057\u006f\u0072\u006b\u0073\u0070\u0061\u0063\u0065"));
            });
        }
    }
    Q_INVOKABLE bool numWorkspaceIsDefaultValue() const {
        return !testPropertySet(14);
    }
    bool preferDark() const {
        return p_preferDark;
    }
    void setPreferDark(const bool &value) {
        auto oldValue = p_preferDark;
        p_preferDark = value;
        markPropertySet(15);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u0070\u0072\u0065\u0066\u0065\u0072\u0044\u0061\u0072\u006b"), value);
            });
        }
        if (p_preferDark != oldValue) {
            Q_EMIT preferDarkChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u0070\u0072\u0065\u0066\u0065\u0072\u0044\u0061\u0072\u006b"), value);
        }
    }
    void resetPreferDark() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u0070\u0072\u0065\u0066\u0065\u0072\u0044\u0061\u0072\u006b"));
            });
        }
    }
    Q_INVOKABLE bool preferDarkIsDefaultValue() const {
        return !testPropertySet(15);
    }
    bool showOnLock() const {
        return p_showOnLock;
    }
    void setShowOnLock(const bool &value) {
        auto oldValue = p_showOnLock;
        p_showOnLock = value;
        markPropertySet(16);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u0073\u0068\u006f\u0077\u004f\u006e\u004c\u006f\u0063\u006b"), value);
            });
        }
        if (p_showOnLock != oldValue) {
            Q_EMIT showOnLockChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u0073\u0068\u006f\u0077\u004f\u006e\u004c\u006f\u0063\u006b"), value);
        }
    }
    void resetShowOnLock() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u0073\u0068\u006f\u0077\u004f\u006e\u004c\u006f\u0063\u006b"));
            });
        }
    }
    Q_INVOKABLE bool showOnLockIsDefaultValue() const {
        return !testPropertySet(16);
    }
    QString themeName() const {
        return p_themeName;
    }
    void setThemeName(const QString &value) {
        auto oldValue = p_themeName;
        p_themeName = value;
        markPropertySet(17);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u0074\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"), value);
            });
        }
        if (p_themeName != oldValue) {
            Q_EMIT themeNameChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u0074\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"), value);
        }
    }
    void resetThemeName() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u0074\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"));
            });
        }
    }
    Q_INVOKABLE bool themeNameIsDefaultValue() const {
        return !testPropertySet(17);
    }
    qlonglong windowOpacity() const {
        return p_windowOpacity;
    }
    void setWindowOpacity(const qlonglong &value) {
        auto oldValue = p_windowOpacity;
        p_windowOpacity = value;
        markPropertySet(18);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u004f\u0070\u0061\u0063\u0069\u0074\u0079"), value);
            });
        }
        if (p_windowOpacity != oldValue) {
            Q_EMIT windowOpacityChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u004f\u0070\u0061\u0063\u0069\u0074\u0079"), value);
        }
    }
    void resetWindowOpacity() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u004f\u0070\u0061\u0063\u0069\u0074\u0079"));
            });
        }
    }
    Q_INVOKABLE bool windowOpacityIsDefaultValue() const {
        return !testPropertySet(18);
    }
    qlonglong windowRadius() const {
        return p_windowRadius;
    }
    void setWindowRadius(const qlonglong &value) {
        auto oldValue = p_windowRadius;
        p_windowRadius = value;
        markPropertySet(19);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0052\u0061\u0064\u0069\u0075\u0073"), value);
            });
        }
        if (p_windowRadius != oldValue) {
            Q_EMIT windowRadiusChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0052\u0061\u0064\u0069\u0075\u0073"), value);
        }
    }
    void resetWindowRadius() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0052\u0061\u0064\u0069\u0075\u0073"));
            });
        }
    }
    Q_INVOKABLE bool windowRadiusIsDefaultValue() const {
        return !testPropertySet(19);
    }
    qlonglong windowThemeType() const {
        return p_windowThemeType;
    }
    void setWindowThemeType(const qlonglong &value) {
        auto oldValue = p_windowThemeType;
        p_windowThemeType = value;
        markPropertySet(20);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0054\u0068\u0065\u006d\u0065\u0054\u0079\u0070\u0065"), value);
            });
        }
        if (p_windowThemeType != oldValue) {
            Q_EMIT windowThemeTypeChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0054\u0068\u0065\u006d\u0065\u0054\u0079\u0070\u0065"), value);
        }
    }
    void resetWindowThemeType() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0054\u0068\u0065\u006d\u0065\u0054\u0079\u0070\u0065"));
            });
        }
    }
    Q_INVOKABLE bool windowThemeTypeIsDefaultValue() const {
        return !testPropertySet(20);
    }
    qlonglong windowTitlebarHeight() const {
        return p_windowTitlebarHeight;
    }
    void setWindowTitlebarHeight(const qlonglong &value) {
        auto oldValue = p_windowTitlebarHeight;
        p_windowTitlebarHeight = value;
        markPropertySet(21);
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this, value]() {
                m_config.loadRelaxed()->setValue(QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0054\u0069\u0074\u006c\u0065\u0062\u0061\u0072\u0048\u0065\u0069\u0067\u0068\u0074"), value);
            });
        }
        if (p_windowTitlebarHeight != oldValue) {
            Q_EMIT windowTitlebarHeightChanged();
            Q_EMIT valueChanged(QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0054\u0069\u0074\u006c\u0065\u0062\u0061\u0072\u0048\u0065\u0069\u0067\u0068\u0074"), value);
        }
    }
    void resetWindowTitlebarHeight() {
        if (auto config = m_config.loadRelaxed()) {
            QMetaObject::invokeMethod(config, [this]() {
                m_config.loadRelaxed()->reset(QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0054\u0069\u0074\u006c\u0065\u0062\u0061\u0072\u0048\u0065\u0069\u0067\u0068\u0074"));
            });
        }
    }
    Q_INVOKABLE bool windowTitlebarHeightIsDefaultValue() const {
        return !testPropertySet(21);
    }
Q_SIGNALS:
    void configInitializeFailed(DTK_CORE_NAMESPACE::DConfig *config);
    void configInitializeSucceed(DTK_CORE_NAMESPACE::DConfig *config);
    void valueChanged(const QString &key, const QVariant &value);

    void activeColorChanged();
    void cursorBlinkChanged();
    void cursorBlinkTimeChanged();
    void cursorSizeChanged();
    void cursorThemeNameChanged();
    void dndDragThresholdChanged();
    void doubleClickDistanceChanged();
    void doubleClickTimeChanged();
    void fontChanged();
    void fontSizeChanged();
    void iconThemeNameChanged();
    void lostScreenChanged();
    void maxWorkspaceChanged();
    void monoFontChanged();
    void numWorkspaceChanged();
    void preferDarkChanged();
    void showOnLockChanged();
    void themeNameChanged();
    void windowOpacityChanged();
    void windowRadiusChanged();
    void windowThemeTypeChanged();
    void windowTitlebarHeightChanged();
private:
    void initializeInConfigThread(DTK_CORE_NAMESPACE::DConfig *config) {
        Q_ASSERT(!m_config.loadRelaxed());
        m_config.storeRelaxed(config);
        if (!config->isValid()) {
           m_status.storeRelaxed(static_cast<int>(Status::Failed));
           Q_EMIT configInitializeFailed(config);
           return;
        }

        if (testPropertySet(0)) {
            config->setValue(QStringLiteral(u"\u0061\u0063\u0074\u0069\u0076\u0065\u0043\u006f\u006c\u006f\u0072"), QVariant::fromValue(p_activeColor));
        } else {
            updateValue(QStringLiteral(u"\u0061\u0063\u0074\u0069\u0076\u0065\u0043\u006f\u006c\u006f\u0072"), QVariant::fromValue(p_activeColor));
        }
        if (testPropertySet(1)) {
            config->setValue(QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0042\u006c\u0069\u006e\u006b"), QVariant::fromValue(p_cursorBlink));
        } else {
            updateValue(QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0042\u006c\u0069\u006e\u006b"), QVariant::fromValue(p_cursorBlink));
        }
        if (testPropertySet(2)) {
            config->setValue(QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0042\u006c\u0069\u006e\u006b\u0054\u0069\u006d\u0065"), QVariant::fromValue(p_cursorBlinkTime));
        } else {
            updateValue(QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0042\u006c\u0069\u006e\u006b\u0054\u0069\u006d\u0065"), QVariant::fromValue(p_cursorBlinkTime));
        }
        if (testPropertySet(3)) {
            config->setValue(QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0053\u0069\u007a\u0065"), QVariant::fromValue(p_cursorSize));
        } else {
            updateValue(QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0053\u0069\u007a\u0065"), QVariant::fromValue(p_cursorSize));
        }
        if (testPropertySet(4)) {
            config->setValue(QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0054\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"), QVariant::fromValue(p_cursorThemeName));
        } else {
            updateValue(QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0054\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"), QVariant::fromValue(p_cursorThemeName));
        }
        if (testPropertySet(5)) {
            config->setValue(QStringLiteral(u"\u0064\u006e\u0064\u0044\u0072\u0061\u0067\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064"), QVariant::fromValue(p_dndDragThreshold));
        } else {
            updateValue(QStringLiteral(u"\u0064\u006e\u0064\u0044\u0072\u0061\u0067\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064"), QVariant::fromValue(p_dndDragThreshold));
        }
        if (testPropertySet(6)) {
            config->setValue(QStringLiteral(u"\u0064\u006f\u0075\u0062\u006c\u0065\u0043\u006c\u0069\u0063\u006b\u0044\u0069\u0073\u0074\u0061\u006e\u0063\u0065"), QVariant::fromValue(p_doubleClickDistance));
        } else {
            updateValue(QStringLiteral(u"\u0064\u006f\u0075\u0062\u006c\u0065\u0043\u006c\u0069\u0063\u006b\u0044\u0069\u0073\u0074\u0061\u006e\u0063\u0065"), QVariant::fromValue(p_doubleClickDistance));
        }
        if (testPropertySet(7)) {
            config->setValue(QStringLiteral(u"\u0064\u006f\u0075\u0062\u006c\u0065\u0043\u006c\u0069\u0063\u006b\u0054\u0069\u006d\u0065"), QVariant::fromValue(p_doubleClickTime));
        } else {
            updateValue(QStringLiteral(u"\u0064\u006f\u0075\u0062\u006c\u0065\u0043\u006c\u0069\u0063\u006b\u0054\u0069\u006d\u0065"), QVariant::fromValue(p_doubleClickTime));
        }
        if (testPropertySet(8)) {
            config->setValue(QStringLiteral(u"\u0066\u006f\u006e\u0074"), QVariant::fromValue(p_font));
        } else {
            updateValue(QStringLiteral(u"\u0066\u006f\u006e\u0074"), QVariant::fromValue(p_font));
        }
        if (testPropertySet(9)) {
            config->setValue(QStringLiteral(u"\u0066\u006f\u006e\u0074\u0053\u0069\u007a\u0065"), QVariant::fromValue(p_fontSize));
        } else {
            updateValue(QStringLiteral(u"\u0066\u006f\u006e\u0074\u0053\u0069\u007a\u0065"), QVariant::fromValue(p_fontSize));
        }
        if (testPropertySet(10)) {
            config->setValue(QStringLiteral(u"\u0069\u0063\u006f\u006e\u0054\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"), QVariant::fromValue(p_iconThemeName));
        } else {
            updateValue(QStringLiteral(u"\u0069\u0063\u006f\u006e\u0054\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"), QVariant::fromValue(p_iconThemeName));
        }
        if (testPropertySet(11)) {
            config->setValue(QStringLiteral(u"\u006c\u006f\u0073\u0074\u0053\u0063\u0072\u0065\u0065\u006e"), QVariant::fromValue(p_lostScreen));
        } else {
            updateValue(QStringLiteral(u"\u006c\u006f\u0073\u0074\u0053\u0063\u0072\u0065\u0065\u006e"), QVariant::fromValue(p_lostScreen));
        }
        if (testPropertySet(12)) {
            config->setValue(QStringLiteral(u"\u006d\u0061\u0078\u0057\u006f\u0072\u006b\u0073\u0070\u0061\u0063\u0065"), QVariant::fromValue(p_maxWorkspace));
        } else {
            updateValue(QStringLiteral(u"\u006d\u0061\u0078\u0057\u006f\u0072\u006b\u0073\u0070\u0061\u0063\u0065"), QVariant::fromValue(p_maxWorkspace));
        }
        if (testPropertySet(13)) {
            config->setValue(QStringLiteral(u"\u006d\u006f\u006e\u006f\u0046\u006f\u006e\u0074"), QVariant::fromValue(p_monoFont));
        } else {
            updateValue(QStringLiteral(u"\u006d\u006f\u006e\u006f\u0046\u006f\u006e\u0074"), QVariant::fromValue(p_monoFont));
        }
        if (testPropertySet(14)) {
            config->setValue(QStringLiteral(u"\u006e\u0075\u006d\u0057\u006f\u0072\u006b\u0073\u0070\u0061\u0063\u0065"), QVariant::fromValue(p_numWorkspace));
        } else {
            updateValue(QStringLiteral(u"\u006e\u0075\u006d\u0057\u006f\u0072\u006b\u0073\u0070\u0061\u0063\u0065"), QVariant::fromValue(p_numWorkspace));
        }
        if (testPropertySet(15)) {
            config->setValue(QStringLiteral(u"\u0070\u0072\u0065\u0066\u0065\u0072\u0044\u0061\u0072\u006b"), QVariant::fromValue(p_preferDark));
        } else {
            updateValue(QStringLiteral(u"\u0070\u0072\u0065\u0066\u0065\u0072\u0044\u0061\u0072\u006b"), QVariant::fromValue(p_preferDark));
        }
        if (testPropertySet(16)) {
            config->setValue(QStringLiteral(u"\u0073\u0068\u006f\u0077\u004f\u006e\u004c\u006f\u0063\u006b"), QVariant::fromValue(p_showOnLock));
        } else {
            updateValue(QStringLiteral(u"\u0073\u0068\u006f\u0077\u004f\u006e\u004c\u006f\u0063\u006b"), QVariant::fromValue(p_showOnLock));
        }
        if (testPropertySet(17)) {
            config->setValue(QStringLiteral(u"\u0074\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"), QVariant::fromValue(p_themeName));
        } else {
            updateValue(QStringLiteral(u"\u0074\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065"), QVariant::fromValue(p_themeName));
        }
        if (testPropertySet(18)) {
            config->setValue(QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u004f\u0070\u0061\u0063\u0069\u0074\u0079"), QVariant::fromValue(p_windowOpacity));
        } else {
            updateValue(QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u004f\u0070\u0061\u0063\u0069\u0074\u0079"), QVariant::fromValue(p_windowOpacity));
        }
        if (testPropertySet(19)) {
            config->setValue(QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0052\u0061\u0064\u0069\u0075\u0073"), QVariant::fromValue(p_windowRadius));
        } else {
            updateValue(QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0052\u0061\u0064\u0069\u0075\u0073"), QVariant::fromValue(p_windowRadius));
        }
        if (testPropertySet(20)) {
            config->setValue(QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0054\u0068\u0065\u006d\u0065\u0054\u0079\u0070\u0065"), QVariant::fromValue(p_windowThemeType));
        } else {
            updateValue(QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0054\u0068\u0065\u006d\u0065\u0054\u0079\u0070\u0065"), QVariant::fromValue(p_windowThemeType));
        }
        if (testPropertySet(21)) {
            config->setValue(QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0054\u0069\u0074\u006c\u0065\u0062\u0061\u0072\u0048\u0065\u0069\u0067\u0068\u0074"), QVariant::fromValue(p_windowTitlebarHeight));
        } else {
            updateValue(QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0054\u0069\u0074\u006c\u0065\u0062\u0061\u0072\u0048\u0065\u0069\u0067\u0068\u0074"), QVariant::fromValue(p_windowTitlebarHeight));
        }

        connect(config, &DTK_CORE_NAMESPACE::DConfig::valueChanged, this, [this](const QString &key) {
            updateValue(key);
        }, Qt::DirectConnection);

        m_status.storeRelaxed(static_cast<int>(Status::Succeed));
        Q_EMIT configInitializeSucceed(config);
    }
    void updateValue(const QString &key, const QVariant &fallback = QVariant()) {
        Q_ASSERT(QThread::currentThread() == m_config.loadRelaxed()->thread());
        const QVariant &value = m_config.loadRelaxed()->value(key, fallback);
        if (key == QStringLiteral(u"\u0061\u0063\u0074\u0069\u0076\u0065\u0043\u006f\u006c\u006f\u0072")) {
            markPropertySet(0, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<QString>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_activeColor != newValue) {
                    p_activeColor = newValue;
                    Q_EMIT activeColorChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0042\u006c\u0069\u006e\u006b")) {
            markPropertySet(1, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<bool>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_cursorBlink != newValue) {
                    p_cursorBlink = newValue;
                    Q_EMIT cursorBlinkChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0042\u006c\u0069\u006e\u006b\u0054\u0069\u006d\u0065")) {
            markPropertySet(2, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<qlonglong>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_cursorBlinkTime != newValue) {
                    p_cursorBlinkTime = newValue;
                    Q_EMIT cursorBlinkTimeChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0053\u0069\u007a\u0065")) {
            markPropertySet(3, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<qlonglong>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_cursorSize != newValue) {
                    p_cursorSize = newValue;
                    Q_EMIT cursorSizeChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u0063\u0075\u0072\u0073\u006f\u0072\u0054\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065")) {
            markPropertySet(4, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<QString>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_cursorThemeName != newValue) {
                    p_cursorThemeName = newValue;
                    Q_EMIT cursorThemeNameChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u0064\u006e\u0064\u0044\u0072\u0061\u0067\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006c\u0064")) {
            markPropertySet(5, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<qlonglong>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_dndDragThreshold != newValue) {
                    p_dndDragThreshold = newValue;
                    Q_EMIT dndDragThresholdChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u0064\u006f\u0075\u0062\u006c\u0065\u0043\u006c\u0069\u0063\u006b\u0044\u0069\u0073\u0074\u0061\u006e\u0063\u0065")) {
            markPropertySet(6, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<qlonglong>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_doubleClickDistance != newValue) {
                    p_doubleClickDistance = newValue;
                    Q_EMIT doubleClickDistanceChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u0064\u006f\u0075\u0062\u006c\u0065\u0043\u006c\u0069\u0063\u006b\u0054\u0069\u006d\u0065")) {
            markPropertySet(7, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<qlonglong>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_doubleClickTime != newValue) {
                    p_doubleClickTime = newValue;
                    Q_EMIT doubleClickTimeChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u0066\u006f\u006e\u0074")) {
            markPropertySet(8, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<QString>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_font != newValue) {
                    p_font = newValue;
                    Q_EMIT fontChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u0066\u006f\u006e\u0074\u0053\u0069\u007a\u0065")) {
            markPropertySet(9, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<qlonglong>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_fontSize != newValue) {
                    p_fontSize = newValue;
                    Q_EMIT fontSizeChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u0069\u0063\u006f\u006e\u0054\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065")) {
            markPropertySet(10, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<QString>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_iconThemeName != newValue) {
                    p_iconThemeName = newValue;
                    Q_EMIT iconThemeNameChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u006c\u006f\u0073\u0074\u0053\u0063\u0072\u0065\u0065\u006e")) {
            markPropertySet(11, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<QString>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_lostScreen != newValue) {
                    p_lostScreen = newValue;
                    Q_EMIT lostScreenChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u006d\u0061\u0078\u0057\u006f\u0072\u006b\u0073\u0070\u0061\u0063\u0065")) {
            markPropertySet(12, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<qlonglong>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_maxWorkspace != newValue) {
                    p_maxWorkspace = newValue;
                    Q_EMIT maxWorkspaceChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u006d\u006f\u006e\u006f\u0046\u006f\u006e\u0074")) {
            markPropertySet(13, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<QString>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_monoFont != newValue) {
                    p_monoFont = newValue;
                    Q_EMIT monoFontChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u006e\u0075\u006d\u0057\u006f\u0072\u006b\u0073\u0070\u0061\u0063\u0065")) {
            markPropertySet(14, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<qlonglong>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_numWorkspace != newValue) {
                    p_numWorkspace = newValue;
                    Q_EMIT numWorkspaceChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u0070\u0072\u0065\u0066\u0065\u0072\u0044\u0061\u0072\u006b")) {
            markPropertySet(15, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<bool>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_preferDark != newValue) {
                    p_preferDark = newValue;
                    Q_EMIT preferDarkChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u0073\u0068\u006f\u0077\u004f\u006e\u004c\u006f\u0063\u006b")) {
            markPropertySet(16, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<bool>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_showOnLock != newValue) {
                    p_showOnLock = newValue;
                    Q_EMIT showOnLockChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u0074\u0068\u0065\u006d\u0065\u004e\u0061\u006d\u0065")) {
            markPropertySet(17, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<QString>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_themeName != newValue) {
                    p_themeName = newValue;
                    Q_EMIT themeNameChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u004f\u0070\u0061\u0063\u0069\u0074\u0079")) {
            markPropertySet(18, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<qlonglong>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_windowOpacity != newValue) {
                    p_windowOpacity = newValue;
                    Q_EMIT windowOpacityChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0052\u0061\u0064\u0069\u0075\u0073")) {
            markPropertySet(19, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<qlonglong>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_windowRadius != newValue) {
                    p_windowRadius = newValue;
                    Q_EMIT windowRadiusChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0054\u0068\u0065\u006d\u0065\u0054\u0079\u0070\u0065")) {
            markPropertySet(20, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<qlonglong>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_windowThemeType != newValue) {
                    p_windowThemeType = newValue;
                    Q_EMIT windowThemeTypeChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
        if (key == QStringLiteral(u"\u0077\u0069\u006e\u0064\u006f\u0077\u0054\u0069\u0074\u006c\u0065\u0062\u0061\u0072\u0048\u0065\u0069\u0067\u0068\u0074")) {
            markPropertySet(21, !m_config.loadRelaxed()->isDefaultValue(key));
            auto newValue = qvariant_cast<qlonglong>(value);
            QMetaObject::invokeMethod(this, [this, newValue, key, value]() {
                Q_ASSERT(QThread::currentThread() == this->thread());
                if (p_windowTitlebarHeight != newValue) {
                    p_windowTitlebarHeight = newValue;
                    Q_EMIT windowTitlebarHeightChanged();
                    Q_EMIT valueChanged(key, value);
                }
            });
            return;
        }
    }
    inline void markPropertySet(const int index, bool on = true) {
        if (index < 32) {
            if (on)
                m_propertySetStatus0.fetchAndOrOrdered(1 << (index - 0));
            else
                m_propertySetStatus0.fetchAndAndOrdered(1 << (index - 0));
            return;
        }
        Q_UNREACHABLE();
    }
    inline bool testPropertySet(const int index) const {
        if (index < 32) {
            return (m_propertySetStatus0.loadRelaxed() & (1 << (index - 0)));
        }
        Q_UNREACHABLE();
    }

    QAtomicPointer<DTK_CORE_NAMESPACE::DConfig> m_config = nullptr;

public:
    enum class Status {
        Invalid = 0,
        Succeed = 1,
        Failed = 2
    };
private:
    QAtomicInteger<int> m_status = static_cast<int>(Status::Invalid);

    // Default value: "#1F6EE7"
    QString p_activeColor { QStringLiteral(u"\u0023\u0031\u0046\u0036\u0045\u0045\u0037") };
    bool p_cursorBlink { true };
    qlonglong p_cursorBlinkTime { 1200 };
    qlonglong p_cursorSize { 24 };
    // Default value: "bloom"
    QString p_cursorThemeName { QStringLiteral(u"\u0062\u006c\u006f\u006f\u006d") };
    qlonglong p_dndDragThreshold { 8 };
    qlonglong p_doubleClickDistance { 5 };
    qlonglong p_doubleClickTime { 250 };
    // Default value: "Source Han Sans SC"
    QString p_font { QStringLiteral(u"\u0053\u006f\u0075\u0072\u0063\u0065\u0020\u0048\u0061\u006e\u0020\u0053\u0061\u006e\u0073\u0020\u0053\u0043") };
    qlonglong p_fontSize { 105 };
    // Default value: "nirvana"
    QString p_iconThemeName { QStringLiteral(u"\u006e\u0069\u0072\u0076\u0061\u006e\u0061") };
    // Default value: "MoveToPrimary"
    QString p_lostScreen { QStringLiteral(u"\u004d\u006f\u0076\u0065\u0054\u006f\u0050\u0072\u0069\u006d\u0061\u0072\u0079") };
    qlonglong p_maxWorkspace { 6 };
    // Default value: "Noto Mono"
    QString p_monoFont { QStringLiteral(u"\u004e\u006f\u0074\u006f\u0020\u004d\u006f\u006e\u006f") };
    qlonglong p_numWorkspace { 2 };
    bool p_preferDark { false };
    bool p_showOnLock { false };
    // Default value: ""
    QString p_themeName { QLatin1String("") };
    qlonglong p_windowOpacity { 40 };
    qlonglong p_windowRadius { 12 };
    qlonglong p_windowThemeType { 0 };
    qlonglong p_windowTitlebarHeight { 40 };
    QAtomicInteger<quint32> m_propertySetStatus0 = 0;
};

#endif // DCONFIG_ORG_DEEPIN_TREELAND_USER_H
